// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.EncoderTest;
    
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Encoder encoderSystemfrontRightEncoder;
    public static Encoder encoderSystemfrontLeftEncoder;
    public static Encoder encoderSystembackLeftEncoder;
    public static Encoder encoderSystembackRightEncoder;
    public static SpeedController driveTrainfrontLeftJag;
    public static SpeedController driveTrainfrontRightJag;
    public static SpeedController driveTrainbackLeftJag;
    public static SpeedController driveTrainbackRightJag;
    public static RobotDrive driveTrainmecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        encoderSystemfrontRightEncoder = new Encoder(9, 8, false, EncodingType.k4X);
        LiveWindow.addSensor("EncoderSystem", "frontRightEncoder", encoderSystemfrontRightEncoder);
        encoderSystemfrontRightEncoder.setDistancePerPulse(1.0);
        encoderSystemfrontRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        encoderSystemfrontLeftEncoder = new Encoder(5, 4, true, EncodingType.k4X);
        LiveWindow.addSensor("EncoderSystem", "frontLeftEncoder", encoderSystemfrontLeftEncoder);
        encoderSystemfrontLeftEncoder.setDistancePerPulse(1.0);
        encoderSystemfrontLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        encoderSystembackLeftEncoder = new Encoder(7, 6, true, EncodingType.k4X);
        LiveWindow.addSensor("EncoderSystem", "backLeftEncoder", encoderSystembackLeftEncoder);
        encoderSystembackLeftEncoder.setDistancePerPulse(1.0);
        encoderSystembackLeftEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        encoderSystembackRightEncoder = new Encoder(3, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("EncoderSystem", "backRightEncoder", encoderSystembackRightEncoder);
        encoderSystembackRightEncoder.setDistancePerPulse(1.0);
        encoderSystembackRightEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTrainfrontLeftJag = new Jaguar(0);
        LiveWindow.addActuator("DriveTrain", "frontLeftJag", (Jaguar) driveTrainfrontLeftJag);
        
        driveTrainfrontRightJag = new Jaguar(3);
        LiveWindow.addActuator("DriveTrain", "frontRightJag", (Jaguar) driveTrainfrontRightJag);
        
        driveTrainbackLeftJag = new Jaguar(1);
        LiveWindow.addActuator("DriveTrain", "backLeftJag", (Jaguar) driveTrainbackLeftJag);
        
        driveTrainbackRightJag = new Jaguar(2);
        LiveWindow.addActuator("DriveTrain", "backRightJag", (Jaguar) driveTrainbackRightJag);
        
        driveTrainmecanumDrive = new RobotDrive(driveTrainfrontLeftJag, driveTrainbackLeftJag,
              driveTrainfrontRightJag, driveTrainbackRightJag);
        
        driveTrainmecanumDrive.setSafetyEnabled(true);
        driveTrainmecanumDrive.setExpiration(0.1);
        driveTrainmecanumDrive.setSensitivity(0.5);
        driveTrainmecanumDrive.setMaxOutput(1.0);
        driveTrainmecanumDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainmecanumDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
