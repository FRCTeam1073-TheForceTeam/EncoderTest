// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1073.EncoderTest.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1073.EncoderTest.Robot;

/**
 *
 */
public class  PrintEncoderValues extends Command {
		double backLeftDistance, backRightDistance, frontLeftDistance, frontRightDistance, averageDistance;
    public PrintEncoderValues() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.encoderSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        backLeftDistance = 0;
        backRightDistance = 0;
        frontLeftDistance = 0;
        frontRightDistance = 0;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.encoderSystem.setEncoderDistance();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	backLeftDistance = Robot.encoderSystem.getBackLeftEncoder().getDistance();
    	backRightDistance = Robot.encoderSystem.getBackRightEncoder().getDistance();
    	frontLeftDistance = Robot.encoderSystem.getFrontLeftEncoder().getDistance();
    	frontRightDistance = Robot.encoderSystem.getFrontRightEncoder().getDistance();
    	averageDistance = (backLeftDistance + backRightDistance + frontLeftDistance + frontRightDistance)/4;
    	
    	double backLeftFeet = backLeftDistance / 12;
    	double backRightFeet = backRightDistance / 12;
    	double frontLeftFeet = frontLeftDistance / 12;
    	double frontRightFeet = frontRightDistance / 12;
    	double averageFeet = averageDistance / 12;
    	
    	double frontLeftPercent = Math.abs(((frontLeftFeet - averageFeet)/averageFeet)*100);
    	// ((frontLeftFeet * 100)/averageFeet)/100;
    	double frontRightPercent = (frontRightFeet * 100)/averageFeet;
    	double backLeftPercent = (backLeftFeet * 100)/averageFeet;
    	double backRightPercent = (backRightFeet * 100)/averageFeet;
    	
    	SmartDashboard.putNumber("Distance front Left in Inch: ", frontLeftDistance);
    	SmartDashboard.putNumber("Distance front Left in Feet: ", frontLeftFeet);
    	SmartDashboard.putNumber("Average Distance Inch: ", averageDistance);
    	SmartDashboard.putNumber("Average Distance Feet: ", averageFeet);
    	SmartDashboard.putNumber("Front Left Percent Difference: ", frontLeftPercent);
    	
    	/*
    	SmartDashboard.putNumber("The Rate of the Front Left Encoder is: ", Robot.encoderSystem.getFrontLeftEncoder().getRate()/1000);
    	SmartDashboard.putNumber("The Current Count of the Front Left Encoder is: ", Robot.encoderSystem.getFrontLeftEncoder().get());
    	
    	SmartDashboard.putNumber("The Rate of the Front Right Encoder is: ", Robot.encoderSystem.getFrontRightEncoder().getRate()/1000);
    	SmartDashboard.putNumber("The Current Count of the Front Right Encoder is: ", Robot.encoderSystem.getFrontRightEncoder().get());
    	
    	SmartDashboard.putNumber("Distance Traveled in Inches: ", Robot.encoderSystem.getFrontRightEncoder().getDistance());
    	
    	SmartDashboard.putNumber("The Rate of the Back Left Encoder is: ", Robot.encoderSystem.getBackLeftEncoder().getRate()/1000);
    	SmartDashboard.putNumber("The Current Count of the Back Left Encoder is: ", Robot.encoderSystem.getBackLeftEncoder().get());
    	
    	SmartDashboard.putNumber("The Rate of the Back Right Encoder is: ", Robot.encoderSystem.getBackRightEncoder().getRate()/1000);
    	SmartDashboard.putNumber("The Current Count of the Back Right Encoder is: ", Robot.encoderSystem.getBackRightEncoder().get());
    	*/
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
